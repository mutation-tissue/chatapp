<!DOCTYPE html>
<html>
  <head>
    <title>chatapp tutorial</title>
    <style>
      .scroll-container {
          width: 300px;
          height: 200px;
          border: 2px solid #333;
          overflow: auto;
          padding: 10px;
      }
  </style>
  </head>
  <body>
    <p>ID: <%= room_id %> USER: <%= user.username %></p>
    <div class ="scroll-container" id="scroll-container">
      <ul id="messages">
        <% messages.forEach(function(message){ %>
          <% if(message.user_id == user.user_id) { %>
            <li class = 'message self'>
              <%= message.message_text %>
            </li>
          <% } else { %>
            <li class = 'message other'>
              <%= message.message_text %>
            </li>
          <% } %>
        <%});%>
      </ul>
  </div>
    <!-- クライアント側のHTMLファイル -->
    <h1>Chat Room</h1>
    <h1>simple chat</h1>
      <input id = "inputText" name='message' type='text'>
      <input id='sendButton' type='submit'>


  <!-- ライブラリの読み込み -->
   
  <script src="/socket.io/socket.io.js"></script>
  <script>
      window.addEventListener('load', function() {
          var container = document.getElementById('scroll-container');
          container.scrollTop = container.scrollHeight;
      });
  </script>
  <script>
    // サーバーへ接続
    const socket = io();

    socket.emit('join room', '<%=room_id %>');

    const clearText = () => {
      document.getElementById('inputText').value = '';
    }

    const addMessageList = (user_id,message) => {
      const ul = document.getElementById('messages');
      const li = document.createElement('li');
      const text = message;
      li.appendChild(document.createTextNode(text));

      li.classList.add('message');
          if (user_id === '<%=user.user_id %>') {
            li.classList.add('self');
          } else {
            li.classList.add('other');
          }

      ul.appendChild(li);
    };
    
    // 送信ボタンのクリックイベントを検知
    document.getElementById('sendButton').addEventListener('click', () => {

      // inputに入力されたテキストを取得
      let inputMessage = document.getElementById('inputText').value;

      if (inputMessage === '') {
        return;
      }
      // 'sendMessage' イベントを発火、メッセージを送信
      socket.emit('room message', '<%=user.user_id%>','<%=room_id %>',inputMessage);

      // input 内のテキストを空にする
      clearText();
    });


    socket.on('receiveMessage', (user_id,message) => {
      // 受信したメッセージをulタグに挿入
      addMessageList(user_id,message);
    });
  </script>
  </body>
</html>